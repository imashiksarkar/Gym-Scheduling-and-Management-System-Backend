name: App Test

on:
  release:
    types: [created]

env:
  NODE_ENV: test
  PORT: 3001
  JWT_SECRET: dummysecret
  ACC_TOKEN_EXP: 300000
  REF_TOKEN_EXP: 86400000
  DB_URL: postgresql://testuser:testpassword@localhost:5432/gsms?schema=public

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract release version
        run: echo "RELEASE_TAG=$(echo ${GITHUB_REF#refs/tags/} | sed 's/^[^0-9]*//')" >> $GITHUB_ENV

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'

      # - name: Enable corepack
      #   run: corepack enable

      # - name: Install pnpm
      #   run: corepack prepare --activate

      # - name: Install dependencies
      #   run: pnpm install --frozen-lockfile

      - name: Enable corepack & install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install dependencies
        run: |
          pnpm install --ignore-scripts
          pnpm approve-builds
          pnpm rebuild

      - name: Run test database
        run: docker compose up -d postgres-test

      - name: Wait for database to be ready
        run: |
          echo "Waiting for database to be ready..."
          retries=0
          max_retries=30

          until docker exec postgres-test pg_isready -U testuser -q; do
            retries=$((retries+1))
            if [ $retries -ge $max_retries ]; then
              echo "Postgres did not become ready in time."
              exit 1
            fi
            echo "Waiting... ($retries/$max_retries)"
            sleep 1
          done

          echo "Database is ready."

      - name: Prisma client generate
        run: pnpm run db:generate

      - name: Prisma client migrate
        run: pnpm run db:push

      - name: Run tests
        run: pnpm run test:run

      - name: Trigger Docker Build Workflow with Inputs
        if: success()
        env:
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/docker-release.yml/dispatches \
            -d "{\"ref\":\"main\",\"inputs\":{\"release_tag\":\"${RELEASE_TAG}\"}}"
